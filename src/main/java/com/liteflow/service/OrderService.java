package com.liteflow.service;

import com.liteflow.dao.inventory.OrderDAO;
import java.util.*;

public class OrderService {
    
    private final OrderDAO orderDAO;
    
    public OrderService() {
        this.orderDAO = new OrderDAO();
    }
    
    /**
     * T·∫°o order m·ªõi v√† g·ª≠i th√¥ng b√°o ƒë·∫øn b·∫øp
     * @param tableId ID c·ªßa b√†n
     * @param items Danh s√°ch m√≥n
     * @param userId ID c·ªßa user t·∫°o order
     * @return UUID c·ªßa order
     */
    public UUID createOrderAndNotifyKitchen(UUID tableId, List<Map<String, Object>> items, UUID userId) {
        // Validate input
        if (tableId == null) {
            throw new IllegalArgumentException("Table ID kh√¥ng ƒë∆∞·ª£c null");
        }
        
        if (items == null || items.isEmpty()) {
            throw new IllegalArgumentException("Danh s√°ch m√≥n kh√¥ng ƒë∆∞·ª£c r·ªóng");
        }
        
        // T·∫°o order
        UUID orderId = orderDAO.createOrder(tableId, items, userId);
        
        // TODO: Trong t∆∞∆°ng lai c√≥ th·ªÉ th√™m logic g·ª≠i th√¥ng b√°o real-time ƒë·∫øn m√†n h√¨nh b·∫øp
        // V√≠ d·ª•: WebSocket, Server-Sent Events, ho·∫∑c Polling
        System.out.println("üì¢ Th√¥ng b√°o ƒë·∫øn b·∫øp: Order m·ªõi ƒë√£ ƒë∆∞·ª£c t·∫°o - ID: " + orderId);
        
        return orderId;
    }
    
    /**
     * L·∫•y orders c·ªßa b√†n (cho cashier)
     */
    public List<Map<String, Object>> getOrdersByTable(UUID tableId) {
        if (tableId == null) {
            throw new IllegalArgumentException("Table ID kh√¥ng ƒë∆∞·ª£c null");
        }
        return orderDAO.getOrdersByTable(tableId);
    }
    
    /**
     * L·∫•y danh s√°ch orders ƒëang ch·ªù l√†m
     */
    public List<Map<String, Object>> getPendingOrders() {
        return orderDAO.getPendingOrders();
    }
    
    /**
     * C·∫≠p nh·∫≠t tr·∫°ng th√°i order
     */
    public boolean updateOrderStatus(UUID orderId, String status) {
        // Validate status
        List<String> validStatuses = Arrays.asList("Pending", "Preparing", "Ready", "Served", "Cancelled");
        if (!validStatuses.contains(status)) {
            throw new IllegalArgumentException("Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá: " + status);
        }
        
        return orderDAO.updateOrderStatus(orderId, status);
    }
    
    /**
     * ƒê√°nh d·∫•u order l√† ƒëang chu·∫©n b·ªã
     */
    public boolean markOrderAsPreparing(UUID orderId) {
        return updateOrderStatus(orderId, "Preparing");
    }
    
    /**
     * ƒê√°nh d·∫•u order l√† ƒë√£ s·∫µn s√†ng
     */
    public boolean markOrderAsReady(UUID orderId) {
        return updateOrderStatus(orderId, "Ready");
    }
    
    /**
     * ƒê√°nh d·∫•u order l√† ƒë√£ ph·ª•c v·ª•
     */
    public boolean markOrderAsServed(UUID orderId) {
        return updateOrderStatus(orderId, "Served");
    }
    
    /**
     * H·ªßy order
     */
    public boolean cancelOrder(UUID orderId) {
        return updateOrderStatus(orderId, "Cancelled");
    }
}

