/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package com.liteflow.dao;

import com.liteflow.model.auth.User;
import com.liteflow.model.auth.Employee;
import com.liteflow.model.auth.Role;
import com.liteflow.model.auth.AuditLog;
import jakarta.persistence.EntityManager;
import jakarta.persistence.EntityManagerFactory;
import jakarta.persistence.Persistence;
import jakarta.persistence.TypedQuery;
import java.util.List;

public class DBTest {
    
    /**
     * H√†m test ƒë∆°n gi·∫£n ƒë·ªÉ l·∫•y d·ªØ li·ªáu t·ª´ database
     */
    public static void testDatabaseConnection() {
        EntityManagerFactory emf = null;
        EntityManager em = null;
        
        try {
            System.out.println("üîÑ ƒêang k·∫øt n·ªëi ƒë·∫øn database...");
            emf = Persistence.createEntityManagerFactory("LiteFlowPU");
            em = emf.createEntityManager();
            
            System.out.println("‚úÖ K·∫øt n·ªëi database th√†nh c√¥ng!");
            
            // Test c√°c h√†m l·∫•y d·ªØ li·ªáu
            testGetUsers(em);
            testGetEmployees(em);
            testGetRoles(em);
            testGetAuditLogs(em);
            
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói khi k·∫øt n·ªëi DB: " + e.getMessage());
            e.printStackTrace();
        } finally {
            if (em != null) {
                em.close();
            }
            if (emf != null) {
                emf.close();
            }
        }
    }
    
    /**
     * Test l·∫•y danh s√°ch User
     */
    private static void testGetUsers(EntityManager em) {
        try {
            System.out.println("\nüìã Test l·∫•y danh s√°ch Users:");
            TypedQuery<User> query = em.createQuery("SELECT u FROM User u", User.class);
            List<User> users = query.setMaxResults(5).getResultList();
            
            if (users.isEmpty()) {
                System.out.println("   ‚ö†Ô∏è  Kh√¥ng c√≥ d·ªØ li·ªáu User trong database");
            } else {
                System.out.println("   ‚úÖ T√¨m th·∫•y " + users.size() + " User(s):");
                for (User user : users) {
                    System.out.println("      - " + user.getEmail() + " (" + user.getDisplayName() + ")");
                }
            }
        } catch (Exception e) {
            System.err.println("   ‚ùå L·ªói khi l·∫•y Users: " + e.getMessage());
        }
    }
    
    /**
     * Test l·∫•y danh s√°ch Employee
     */
    private static void testGetEmployees(EntityManager em) {
        try {
            System.out.println("\nüë• Test l·∫•y danh s√°ch Employees:");
            TypedQuery<Employee> query = em.createQuery("SELECT e FROM Employee e", Employee.class);
            List<Employee> employees = query.setMaxResults(5).getResultList();
            
            if (employees.isEmpty()) {
                System.out.println("   ‚ö†Ô∏è  Kh√¥ng c√≥ d·ªØ li·ªáu Employee trong database");
            } else {
                System.out.println("   ‚úÖ T√¨m th·∫•y " + employees.size() + " Employee(s):");
                for (Employee emp : employees) {
                    System.out.println("      - " + emp.getFullName() + " (" + emp.getPosition() + ")");
                }
            }
        } catch (Exception e) {
            System.err.println("   ‚ùå L·ªói khi l·∫•y Employees: " + e.getMessage());
        }
    }
    
    /**
     * Test l·∫•y danh s√°ch Role
     */
    private static void testGetRoles(EntityManager em) {
        try {
            System.out.println("\nüîê Test l·∫•y danh s√°ch Roles:");
            TypedQuery<Role> query = em.createQuery("SELECT r FROM Role r", Role.class);
            List<Role> roles = query.getResultList();
            
            if (roles.isEmpty()) {
                System.out.println("   ‚ö†Ô∏è  Kh√¥ng c√≥ d·ªØ li·ªáu Role trong database");
            } else {
                System.out.println("   ‚úÖ T√¨m th·∫•y " + roles.size() + " Role(s):");
                for (Role role : roles) {
                    System.out.println("      - " + role.getName() + ": " + role.getDescription());
                }
            }
        } catch (Exception e) {
            System.err.println("   ‚ùå L·ªói khi l·∫•y Roles: " + e.getMessage());
        }
    }
    
    /**
     * Test l·∫•y danh s√°ch AuditLog
     */
    private static void testGetAuditLogs(EntityManager em) {
        try {
            System.out.println("\nüìä Test l·∫•y danh s√°ch AuditLogs:");
            TypedQuery<AuditLog> query = em.createQuery("SELECT a FROM AuditLog a ORDER BY a.createdAt DESC", AuditLog.class);
            List<AuditLog> logs = query.setMaxResults(3).getResultList();
            
            if (logs.isEmpty()) {
                System.out.println("   ‚ö†Ô∏è  Kh√¥ng c√≥ d·ªØ li·ªáu AuditLog trong database");
            } else {
                System.out.println("   ‚úÖ T√¨m th·∫•y " + logs.size() + " AuditLog(s) g·∫ßn nh·∫•t:");
                for (AuditLog log : logs) {
                    System.out.println("      - " + log.getAction() + " (" + log.getCreatedAt() + ")");
                }
            }
        } catch (Exception e) {
            System.err.println("   ‚ùå L·ªói khi l·∫•y AuditLogs: " + e.getMessage());
        }
    }
    
    /**
     * H√†m ƒë∆°n gi·∫£n test l·∫•y 1 record t·ª´ b·∫£ng User
     */
    public static void testSimpleUserQuery() {
        EntityManagerFactory emf = null;
        EntityManager em = null;
        
        try {
            emf = Persistence.createEntityManagerFactory("LiteFlowPU");
            em = emf.createEntityManager();

            em.getTransaction().begin();
            // Th·ª≠ query d·ªØ li·ªáu t·ª´ b·∫£ng User
            Object result = em.createQuery("SELECT u FROM User u").setMaxResults(1).getSingleResult();
            em.getTransaction().commit();

            System.out.println("‚úÖ K·∫øt n·ªëi th√†nh c√¥ng, c√≥ d·ªØ li·ªáu: " + result);

        } catch (Exception e) {
            System.err.println("‚ùå L·ªói khi k·∫øt n·ªëi DB: " + e.getMessage());
            e.printStackTrace();
        } finally {
            if (em != null) {
                em.close();
            }
            if (emf != null) {
                emf.close();
            }
        }
    }
    
    public static void main(String[] args) {
        System.out.println("üöÄ B·∫Øt ƒë·∫ßu test database connection...\n");
        
        // Test ƒë∆°n gi·∫£n
        System.out.println("=== TEST ƒê∆†N GI·∫¢N ===");
        testSimpleUserQuery();
        
        System.out.println("\n" + "=".repeat(50));
        
        // Test chi ti·∫øt
        System.out.println("=== TEST CHI TI·∫æT ===");
        testDatabaseConnection();
        
        System.out.println("\nüèÅ Ho√†n th√†nh test database!");
    }
}