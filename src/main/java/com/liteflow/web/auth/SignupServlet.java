package com.liteflow.web.auth;

import com.liteflow.model.auth.User;
import com.liteflow.service.auth.AuditService;
import com.liteflow.service.auth.UserService;
// import com.liteflow.util.MailUtil; // b·∫≠t khi c√≥ mail server

import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.*;
import jakarta.servlet.ServletException;
import java.io.IOException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
// ...existing code...
import java.util.regex.Pattern;
import java.util.logging.Logger;
import com.liteflow.service.auth.OtpService;

/**
 * SignupServlet: - Ti·∫øp nh·∫≠n request ƒëƒÉng k√Ω - Validate input - Sinh OTP, l∆∞u
 * session - Chuy·ªÉn sang verify-otp.jsp ƒë·ªÉ x√°c th·ª±c
 */
@WebServlet(urlPatterns = {"/register"})
public class SignupServlet extends HttpServlet {

    private final UserService userService = new UserService();
    private final AuditService audit = new AuditService();
    private final OtpService otpService = new OtpService();
    private static final Logger LOG = Logger.getLogger(SignupServlet.class.getName());

    private static final Pattern EMAIL_PATTERN
            = Pattern.compile("^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.com$");
    private static final Pattern PASSWORD_PATTERN
            = Pattern.compile("^(?=.*[A-Z])(?=.*\\d).{8,}$");

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp)
            throws ServletException, IOException {

        // ‚úÖ CSRF b·∫£o v·ªá
        String csrfForm = req.getParameter("csrfToken");
        String csrfSess = (String) req.getSession().getAttribute("csrfToken");
        if (csrfSess == null || !csrfSess.equals(csrfForm)) {
            req.setAttribute("error", "Invalid request. Please refresh and try again.");
            req.getRequestDispatcher("/auth/signup.jsp").forward(req, resp);
            return;
        }

        String username = req.getParameter("username");
        String email = req.getParameter("email");
        String password = req.getParameter("password");
        String confirm = req.getParameter("confirmPassword");
        String ip = req.getRemoteAddr();

        // Validate input r·ªóng
        if (username == null || email == null || password == null || confirm == null) {
            req.setAttribute("error", "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin.");
            req.getRequestDispatcher("/auth/signup.jsp").forward(req, resp);
            return;
        }

        username = username.trim();
        email = email.trim().toLowerCase();

        // Validate email
        if (!EMAIL_PATTERN.matcher(email).matches()) {
            // Tr·∫£ l·ªói c·ª• th·ªÉ cho field email v√† gi·ªØ l·∫°i gi√° tr·ªã ng∆∞·ªùi d√πng ƒë√£ nh·∫≠p
            req.setAttribute("emailError", "Email ph·∫£i h·ª£p l·ªá v√† k·∫øt th√∫c b·∫±ng .com");
            req.setAttribute("usernameValue", username);
            req.setAttribute("emailValue", email);
            req.getRequestDispatcher("/auth/signup.jsp").forward(req, resp);
            return;
        }

        // Validate password
        if (!PASSWORD_PATTERN.matcher(password).matches()) {
            req.setAttribute("passwordError", "M·∫≠t kh·∫©u t·ªëi thi·ªÉu 8 k√Ω t·ª±, c√≥ √≠t nh·∫•t 1 ch·ªØ hoa v√† 1 s·ªë.");
            req.setAttribute("usernameValue", username);
            req.setAttribute("emailValue", email);
            req.getRequestDispatcher("/auth/signup.jsp").forward(req, resp);
            return;
        }

        // Confirm password
        if (!password.equals(confirm)) {
            req.setAttribute("confirmError", "M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp.");
            req.setAttribute("usernameValue", username);
            req.setAttribute("emailValue", email);
            req.getRequestDispatcher("/auth/signup.jsp").forward(req, resp);
            return;
        }

        // Check user t·ªìn t·∫°i
        User existing = userService.findByEmail(email);
        if (existing != null) {
            req.setAttribute("emailError", "Email ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω. Vui l√≤ng ƒëƒÉng nh·∫≠p ho·∫∑c ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u.");
            req.setAttribute("usernameValue", username);
            req.setAttribute("emailValue", email);
            req.getRequestDispatcher("/auth/signup.jsp").forward(req, resp);
            return;
        }

        // ‚úÖ L∆∞u th√¥ng tin signup (hash m·∫≠t kh·∫©u) v√†o session, ph√°t OTP l∆∞u v√†o DB
        HttpSession session = req.getSession(true);
        session.setAttribute("otpContext", "signup");
        session.setAttribute("otpEmail", email);
        session.setAttribute("signupUsername", username);
        // Hash m·∫≠t kh·∫©u tr∆∞·ªõc khi l∆∞u v√†o session ƒë·ªÉ tr√°nh gi·ªØ plaintext
        String hashed = com.liteflow.util.PasswordUtil.hash(password, 12);
        session.setAttribute("signupPasswordHash", hashed);

        // Issue OTP via DB-backed OtpService (this will also invalidate prior OTPs for the email)
        String otp = otpService.issueOtpForEmail(email, ip);
        try {
            if (!"admin@liteflow.com".equalsIgnoreCase(email)) {
                com.liteflow.util.MailUtil.sendOtpMail(email, otp);
                LOG.info("üìß OTP signup g·ª≠i t·ªõi " + email + ": " + otp);
            } else {
                LOG.info("üîë Admin fixed OTP: 000000");
            }
        } catch (Exception e) {
            LOG.warning("‚ùå L·ªói g·ª≠i mail OTP: " + e.getMessage());
        }

        // Fallback OTP l∆∞u session (d·ª± ph√≤ng n·∫øu DB OTP kh√¥ng ƒë·ªçc ƒë∆∞·ª£c do schema c≈©)
        session.setAttribute("signupOtpCode", otp);
        session.setAttribute("signupOtpExpire", java.time.LocalDateTime.now().plusMinutes(5));

        // Audit log OTP
        audit.log(null,
                AuditService.AuditAction.OTP_ISSUED,
                AuditService.ObjectType.USER,
                email,
                "OTP issued for signup",
                ip);

    // Chuy·ªÉn t·ªõi ƒë∆∞·ªùng d·∫´n th√¢n thi·ªán /auth/verify (k√®m email ƒë·ªÉ JSP fallback n·∫øu m·∫•t session)
    String qEmail = URLEncoder.encode(email, StandardCharsets.UTF_8);
    resp.sendRedirect(req.getContextPath() + "/auth/verify?email=" + qEmail + "&sent=1");
    }

    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp)
            throws ServletException, IOException {
        // Sinh CSRF token gi·ªëng LoginServlet
        String csrfToken = java.util.UUID.randomUUID().toString();
        req.getSession(true).setAttribute("csrfToken", csrfToken);
        req.setAttribute("csrfToken", csrfToken);
        req.getRequestDispatcher("/auth/signup.jsp").forward(req, resp);
    }
}
