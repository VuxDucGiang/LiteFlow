package com.liteflow.controller;

import com.liteflow.service.OrderService;
import com.google.gson.Gson;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.*;

@WebServlet("/api/order/status")
public class UpdateOrderStatusServlet extends HttpServlet {
    
    private OrderService orderService;
    
    @Override
    public void init() throws ServletException {
        orderService = new OrderService();
    }
    
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        response.setContentType("application/json");
        response.setCharacterEncoding("UTF-8");
        
        PrintWriter out = response.getWriter();
        Gson gson = new Gson();
        
        try {
            // ƒê·ªçc JSON t·ª´ request body
            StringBuilder sb = new StringBuilder();
            BufferedReader reader = request.getReader();
            String line;
            while ((line = reader.readLine()) != null) {
                sb.append(line);
            }
            
            String requestBody = sb.toString();
            System.out.println("üì• Nh·∫≠n request c·∫≠p nh·∫≠t tr·∫°ng th√°i: " + requestBody);
            
            // Parse JSON
            @SuppressWarnings("unchecked")
            Map<String, Object> requestData = gson.fromJson(requestBody, Map.class);
            
            if (requestData == null) {
                sendErrorResponse(response, out, gson, 400, "Request body kh√¥ng h·ª£p l·ªá");
                return;
            }
            
            String orderIdStr = (String) requestData.get("orderId");
            String status = (String) requestData.get("status");
            
            if (orderIdStr == null || orderIdStr.isEmpty()) {
                sendErrorResponse(response, out, gson, 400, "Order ID kh√¥ng ƒë∆∞·ª£c r·ªóng");
                return;
            }
            
            if (status == null || status.isEmpty()) {
                sendErrorResponse(response, out, gson, 400, "Status kh√¥ng ƒë∆∞·ª£c r·ªóng");
                return;
            }
            
            // Convert orderId to UUID
            UUID orderId;
            try {
                orderId = UUID.fromString(orderIdStr);
            } catch (IllegalArgumentException e) {
                sendErrorResponse(response, out, gson, 400, "Order ID kh√¥ng h·ª£p l·ªá: " + orderIdStr);
                return;
            }
            
            // C·∫≠p nh·∫≠t tr·∫°ng th√°i
            boolean success = orderService.updateOrderStatus(orderId, status);
            
            if (!success) {
                sendErrorResponse(response, out, gson, 404, "Kh√¥ng t√¨m th·∫•y order");
                return;
            }
            
            // Tr·∫£ v·ªÅ response th√†nh c√¥ng
            Map<String, Object> responseData = new HashMap<>();
            responseData.put("success", true);
            responseData.put("message", "ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng!");
            responseData.put("orderId", orderIdStr);
            responseData.put("newStatus", status);
            
            response.setStatus(HttpServletResponse.SC_OK);
            out.print(gson.toJson(responseData));
            
            System.out.println("‚úÖ ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i order " + orderId + " th√†nh " + status);
            
        } catch (IllegalArgumentException e) {
            System.err.println("‚ö†Ô∏è L·ªói validation: " + e.getMessage());
            sendErrorResponse(response, out, gson, 400, e.getMessage());
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i: " + e.getMessage());
            e.printStackTrace();
            sendErrorResponse(response, out, gson, 500, "L·ªói server: " + e.getMessage());
        } finally {
            out.flush();
        }
    }
    
    /**
     * G·ª≠i error response
     */
    private void sendErrorResponse(HttpServletResponse response, PrintWriter out, 
                                   Gson gson, int statusCode, String message) {
        response.setStatus(statusCode);
        Map<String, Object> errorResponse = new HashMap<>();
        errorResponse.put("success", false);
        errorResponse.put("message", message);
        out.print(gson.toJson(errorResponse));
    }
}

